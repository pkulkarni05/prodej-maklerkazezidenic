// netlify/functions/resolveFinancePrefill.ts
// Purpose:
// - Verify a JWT token from the URL (?token=...) and return prefill data for the finance form.
// - Token should be generated by your admin function (createFinanceFormLink.ts) and include:
//   { purpose:"finance_form_v1", applicant_id, property_id, property_code, iat, exp }
//
// Env required:
// - SUPABASE_URL
// - SUPABASE_SERVICE_ROLE_KEY
// - FINANCE_LINK_SECRET
//
// Request (GET):
//   /.netlify/functions/resolveFinancePrefill?token=<JWT>
//
// Response (200 OK):
// {
//   "ok": true,
//   "expires_at": "2025-10-27T12:34:56.000Z",
//   "applicant": { "id": "...", "full_name": "Jana...", "email":"...", "phone":"..." },
//   "property": {
//     "id":"...",
//     "property_code":"077-NP09999",
//     "address":"...",
//     "property_configuration":"...",
//     "business_type":"sell",
//     "status":"available"
//   }
// }
//
// Failures: 400 (missing), 401 (invalid/expired), 404 (not found), 500 (server)

import type { Handler } from "@netlify/functions";
import { createClient } from "@supabase/supabase-js";
import jwt from "jsonwebtoken";

const { SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, FINANCE_LINK_SECRET } =
  process.env;

type Claims = {
  purpose?: string;
  applicant_id?: string;
  property_id?: string;
  property_code?: string;
  iat?: number;
  exp?: number;
};

export const handler: Handler = async (event) => {
  try {
    if (event.httpMethod !== "GET") {
      return json(405, { ok: false, error: "Method not allowed" });
    }
    if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
      return json(500, { ok: false, error: "Missing Supabase env vars" });
    }
    if (!FINANCE_LINK_SECRET) {
      return json(500, { ok: false, error: "Missing FINANCE_LINK_SECRET" });
    }

    const token = (event.queryStringParameters?.token || "").trim();
    if (!token) {
      return json(400, { ok: false, error: "Missing token" });
    }

    // Verify signature + exp
    let claims: Claims;
    try {
      claims = jwt.verify(token, FINANCE_LINK_SECRET, {
        algorithms: ["HS256"],
      }) as Claims;
    } catch (e: any) {
      return json(401, { ok: false, error: "Invalid or expired token" });
    }

    if (claims.purpose !== "finance_form_v1") {
      return json(401, { ok: false, error: "Invalid token purpose" });
    }
    if (!claims.applicant_id || !claims.property_id || !claims.property_code) {
      return json(401, { ok: false, error: "Incomplete token" });
    }

    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

    // Fetch applicant (only minimal fields needed for the form)
    const { data: applicant, error: applErr } = await supabase
      .from("applicants")
      .select("id, full_name, email, phone")
      .eq("id", claims.applicant_id)
      .single();

    if (applErr || !applicant) {
      return json(404, { ok: false, error: "Applicant not found" });
    }

    // Fetch property context
    const { data: property, error: propErr } = await supabase
      .from("properties")
      .select(
        "id, property_code, address, property_configuration, business_type, status"
      )
      .eq("id", claims.property_id)
      .single();

    if (propErr || !property) {
      return json(404, { ok: false, error: "Property not found" });
    }

    // (Optional) Soft guards â€” you already check this in the page when rendering
    // We don't block prefill here; the page will still show "not available" if needed.

    const expiresAtIso = claims.exp
      ? new Date(claims.exp * 1000).toISOString()
      : null;

    return json(200, {
      ok: true,
      expires_at: expiresAtIso,
      applicant: {
        id: applicant.id,
        full_name: applicant.full_name,
        email: applicant.email,
        phone: applicant.phone,
      },
      property: {
        id: property.id,
        property_code: property.property_code,
        address: property.address,
        property_configuration: property.property_configuration,
        business_type: property.business_type,
        status: property.status,
      },
    });
  } catch (e: any) {
    console.error("resolveFinancePrefill error:", e?.message || e);
    return json(500, { ok: false, error: "Internal server error" });
  }
};

function json(status: number, body: any) {
  return {
    statusCode: status,
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  };
}
